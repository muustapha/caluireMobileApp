"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commander_1 = require("commander");
require("isomorphic-fetch");
const getInfo_1 = require("./getInfo");
const integrate_1 = require("./integrate");
const options_1 = require("./options");
const prompter_1 = require("./prompter");
const upgrade_1 = require("./upgrade");
const { version } = require('../package.json');
const program = new commander_1.Command();
program
    .version(version)
    .name('integrate')
    .description('Integrate new packages into your project.')
    .argument('[package-name]', 'Specify a package to integrate')
    .option('-d, --debug', 'enables verbose logging', false)
    .action(async (packageName, args) => {
    options_1.options.set(args);
    (0, prompter_1.logIntro)();
    await (0, integrate_1.integrate)(packageName);
    (0, prompter_1.logOutro)();
})
    .showHelpAfterError();
program
    .command('info')
    .description('Get integration info about a package.')
    .argument('<package-name>', 'Package name to integrate')
    .action(async (packageName) => {
    (0, prompter_1.logIntro)('react-native-integrate - package information');
    await (0, getInfo_1.getInfo)(packageName);
    (0, prompter_1.logOutro)('completed package information');
});
program
    .command('upgrade')
    .description('Upgrade React Native project. Re-integrate previously integrated modules and apply own changes.')
    .action(async () => {
    (0, prompter_1.logIntro)('react-native-integrate - upgrade project');
    await (0, upgrade_1.upgrade)();
    (0, prompter_1.logOutro)('completed project upgrade');
});
program.parseAsync().catch(console.warn);
