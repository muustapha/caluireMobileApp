"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.summary = exports.runTask = exports.jsonTask = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const applyObjectModification_1 = require("../utils/applyObjectModification");
const getErrMessage_1 = require("../utils/getErrMessage");
const getProjectPath_1 = require("../utils/getProjectPath");
const satisfies_1 = require("../utils/satisfies");
const setState_1 = require("../utils/setState");
const variables_1 = require("../variables");
function jsonTask(args) {
    let { content } = args;
    const { task } = args;
    for (const action of task.actions) {
        variables_1.variables.set('CONTENT', content);
        if (action.when && !(0, satisfies_1.satisfies)(variables_1.variables.getStore(), action.when)) {
            (0, setState_1.setState)(action.name, {
                state: 'skipped',
                reason: 'when',
                error: false,
            });
            continue;
        }
        (0, setState_1.setState)(action.name, {
            state: 'progress',
            error: false,
        });
        try {
            content = (0, applyObjectModification_1.applyObjectModification)(content, action);
            (0, setState_1.setState)(action.name, {
                state: 'done',
                error: false,
            });
        }
        catch (e) {
            (0, setState_1.setState)(action.name, {
                state: 'error',
                reason: (0, getErrMessage_1.getErrMessage)(e),
                error: true,
            });
            throw e;
        }
    }
    return content;
}
exports.jsonTask = jsonTask;
function getJsonPath(filePath) {
    const projectPath = (0, getProjectPath_1.getProjectPath)();
    const jsonPath = path_1.default.join(projectPath, filePath);
    // security check
    if (!jsonPath.startsWith(projectPath)) {
        throw new Error('invalid destination path');
    }
    return jsonPath;
}
function readJsonContent(filePath) {
    const jsonPath = getJsonPath(filePath);
    return fs_1.default.existsSync(jsonPath)
        ? JSON.parse(fs_1.default.readFileSync(jsonPath, 'utf-8'))
        : {};
}
function writeJsonContent(content, filePath) {
    const jsonPath = getJsonPath(filePath);
    return fs_1.default.writeFileSync(jsonPath, JSON.stringify(content, null, 2), 'utf-8');
}
function runTask(args) {
    let content = readJsonContent(args.task.path);
    content = jsonTask({
        ...args,
        content,
    });
    writeJsonContent(content, args.task.path);
}
exports.runTask = runTask;
exports.summary = 'Json file modification';
