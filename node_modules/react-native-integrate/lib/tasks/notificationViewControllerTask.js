"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.summary = exports.runTask = exports.notificationViewControllerTask = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const constants_1 = require("../constants");
const applyContentModification_1 = require("../utils/applyContentModification");
const findClosingTagIndex_1 = require("../utils/findClosingTagIndex");
const getErrMessage_1 = require("../utils/getErrMessage");
const getProjectPath_1 = require("../utils/getProjectPath");
const satisfies_1 = require("../utils/satisfies");
const setState_1 = require("../utils/setState");
const stringSplice_1 = require("../utils/stringSplice");
const variables_1 = require("../variables");
async function notificationViewControllerTask(args) {
    let { content } = args;
    const { task, configPath, packageName } = args;
    for (const action of task.actions) {
        variables_1.variables.set('CONTENT', content);
        if (action.when && !(0, satisfies_1.satisfies)(variables_1.variables.getStore(), action.when)) {
            (0, setState_1.setState)(action.name, {
                state: 'skipped',
                reason: 'when',
                error: false,
            });
            continue;
        }
        (0, setState_1.setState)(action.name, {
            state: 'progress',
            error: false,
        });
        try {
            content = await (0, applyContentModification_1.applyContentModification)({
                action,
                findOrCreateBlock,
                configPath,
                packageName,
                content,
                indentation: 4,
            });
            (0, setState_1.setState)(action.name, {
                state: 'done',
                error: false,
            });
        }
        catch (e) {
            (0, setState_1.setState)(action.name, {
                state: 'error',
                reason: (0, getErrMessage_1.getErrMessage)(e),
                error: true,
            });
            throw e;
        }
    }
    return content;
}
exports.notificationViewControllerTask = notificationViewControllerTask;
function findOrCreateBlock(content, block) {
    let blockContent = {
        start: 0,
        end: content.length,
        match: content,
        space: '',
        justCreated: false,
    };
    const blockDefinition = blockDefinitions[block];
    if (!blockDefinition)
        throw new Error(`Invalid block: ${block}`);
    const { regex, makeNewMethod } = blockDefinition;
    let blockStart = regex.exec(content);
    const justCreated = !blockStart;
    if (!blockStart) {
        const newMethod = makeNewMethod();
        content = appendNewMethod(content, newMethod);
        blockStart = regex.exec(content);
    }
    if (!blockStart) {
        throw new Error('block could not be inserted, something wrong?');
    }
    const blockEndIndex = (0, findClosingTagIndex_1.findClosingTagIndex)(content, blockStart.index + blockStart[0].length);
    const blockBody = content.substring(blockStart.index + blockStart[0].length, blockEndIndex);
    blockContent = {
        start: blockStart.index + blockStart[0].length,
        end: blockEndIndex,
        match: blockBody,
        justCreated,
        space: '',
    };
    return {
        blockContent,
        content,
    };
}
const blockDefinitions = {
    viewDidLoad: {
        regex: /viewDidLoad.*?\{/s,
        makeNewMethod: () => {
            return '- (void)viewDidLoad {}';
        },
    },
    viewWillAppear: {
        regex: /viewWillAppear.*?\{/s,
        makeNewMethod: () => {
            return '- (void)viewWillAppear:(BOOL)animated {}';
        },
    },
    viewDidAppear: {
        regex: /viewDidAppear.*?\{/s,
        makeNewMethod: () => {
            return '- (void)viewDidAppear:(BOOL)animated {}';
        },
    },
    viewWillDisappear: {
        regex: /viewWillDisappear.*?\{/s,
        makeNewMethod: () => {
            return '- (void)viewWillDisappear:(BOOL)animated {}';
        },
    },
    dealloc: {
        regex: /dealloc.*?\{/s,
        makeNewMethod: () => {
            return '- (void)dealloc {}';
        },
    },
    didReceiveNotification: {
        regex: /didReceiveNotification\b.*?\{/s,
        makeNewMethod: () => {
            return '- (void)didReceiveNotification:(UNNotification *)notification {}';
        },
    },
    didReceiveNotificationResponse: {
        regex: /didReceiveNotificationResponse.*?\{/s,
        makeNewMethod: () => {
            return '- (void)didReceiveNotificationResponse:(UNNotificationResponse *)response completionHandler:(void (^)(UNNotificationContentExtensionResponseOption option))completion {}';
        },
    },
};
function appendNewMethod(content, newMethod) {
    const notificationContentMatch = /@implementation NotificationViewController.*?@end/s.exec(content);
    if (!notificationContentMatch)
        throw new Error('Could not find @implementation NotificationViewController');
    const codeToInsert = `${newMethod}

`;
    return (0, stringSplice_1.stringSplice)(content, notificationContentMatch.index + notificationContentMatch[0].length - 4, 0, codeToInsert);
}
function getNotificationContentPath(target) {
    const projectPath = (0, getProjectPath_1.getProjectPath)();
    const notificationContentPath = path_1.default.join(projectPath, 'ios', target, constants_1.Constants.NOTIFICATION_VIEW_CONTROLLER_FILE_NAME);
    if (!fs_1.default.existsSync(notificationContentPath))
        throw new Error(`NotificationContent file not found at ${notificationContentPath}`);
    return notificationContentPath;
}
function readNotificationContentContent(target) {
    const notificationContentPath = getNotificationContentPath(target);
    return fs_1.default.readFileSync(notificationContentPath, 'utf-8');
}
function writeNotificationContentContent(content, target) {
    const notificationContentPath = getNotificationContentPath(target);
    return fs_1.default.writeFileSync(notificationContentPath, content, 'utf-8');
}
async function runTask(args) {
    args.task.target = (0, variables_1.getText)(args.task.target);
    let content = readNotificationContentContent(args.task.target);
    content = await notificationViewControllerTask({
        ...args,
        content,
    });
    writeNotificationContentContent(content, args.task.target);
}
exports.runTask = runTask;
exports.summary = 'NotificationViewController.m modification';
