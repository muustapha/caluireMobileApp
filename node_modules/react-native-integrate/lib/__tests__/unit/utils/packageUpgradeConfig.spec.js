"use strict";
/* eslint-disable @typescript-eslint/no-unsafe-call */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const { mockFs } = require('../../mocks/mockAll');
const path_1 = __importDefault(require("path"));
const getProjectPath_1 = require("../../../utils/getProjectPath");
const packageUpgradeConfig_1 = require("../../../utils/packageUpgradeConfig");
describe('getPackageUpgradeConfig', () => {
    it('should handle invalid json', () => {
        const projectPath = (0, getProjectPath_1.getProjectPath)();
        const upgradeJsonPath = path_1.default.join(projectPath, '.upgrade', 'packages', 'test-package', 'upgrade.json');
        mockFs.writeFileSync(upgradeJsonPath, 'invalid json');
        const result = (0, packageUpgradeConfig_1.getPackageUpgradeConfig)('test-package');
        expect(result).toEqual({});
    });
});
describe('writePackageUpgradeConfig', () => {
    it('should handle invalid json', () => {
        const projectPath = (0, getProjectPath_1.getProjectPath)();
        const upgradeJsonPath = path_1.default.join(projectPath, '.upgrade', 'packages', 'test-package', 'upgrade.json');
        mockFs.writeFileSync(upgradeJsonPath, 'invalid json');
        expect(() => (0, packageUpgradeConfig_1.writePackageUpgradeConfig)('test-package', {})).not.toThrow();
    });
});
