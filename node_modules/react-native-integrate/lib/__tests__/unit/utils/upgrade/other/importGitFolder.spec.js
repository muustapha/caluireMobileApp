"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
require('../../../../mocks/mockAll');
const path_1 = __importDefault(require("path"));
const getProjectPath_1 = require("../../../../../utils/getProjectPath");
const importGitFolder_1 = require("../../../../../utils/upgrade/other/importGitFolder");
const mockFs_1 = require("../../../../mocks/mockFs");
describe('importGitFolder', () => {
    it('should get .git', async () => {
        mockFs_1.mockFs.writeFileSync('/oldProject/.git/some.file', 'random');
        mockFs_1.mockFs.writeFileSync(path_1.default.join((0, getProjectPath_1.getProjectPath)(), '.git/new-project.file'), 'random');
        const importGetter = (0, importGitFolder_1.importGitFolder)('/oldProject');
        expect(importGetter).toBeTruthy();
        expect(importGetter.value).toEqual('1 files');
        await importGetter.apply();
        expect(mockFs_1.mockFs.readFileSync(path_1.default.join((0, getProjectPath_1.getProjectPath)(), '.git/some.file'))).toContain('random');
        expect(mockFs_1.mockFs.existsSync(path_1.default.join((0, getProjectPath_1.getProjectPath)(), '.git/new-project.file'))).toBeFalsy();
    });
    it('should handle errors', () => {
        mockFs_1.mockFs.setReadPermission(false);
        mockFs_1.mockFs.writeFileSync('/oldProject/.git/some.file', 'random');
        const importGetter = (0, importGitFolder_1.importGitFolder)('/oldProject');
        expect(importGetter).toBeNull();
    });
    it('should handle not finding .git folder', () => {
        const importGetter = (0, importGitFolder_1.importGitFolder)('/oldProject');
        expect(importGetter).toBeNull();
    });
    it('should handle copy error', async () => {
        mockFs_1.mockFs.writeFileSync('/oldProject/.git/some.file', 'random');
        mockFs_1.mockFs.writeFileSync(path_1.default.join((0, getProjectPath_1.getProjectPath)(), '.git/new-project.file'), 'random');
        mockFs_1.mockFs.copyFile.mockImplementationOnce((from, to, cb) => {
            cb(new Error('random'));
        });
        const importGetter = (0, importGitFolder_1.importGitFolder)('/oldProject');
        await expect(importGetter.apply()).rejects.toThrow('random');
        expect(mockFs_1.mockFs.existsSync(path_1.default.join((0, getProjectPath_1.getProjectPath)(), '.git/new-project.file'))).toBeTruthy();
    });
});
