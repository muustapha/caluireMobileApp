"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
require('../../../../mocks/mockAll');
const path_1 = __importDefault(require("path"));
const getProjectPath_1 = require("../../../../../utils/getProjectPath");
const importAndroidDisplayName_1 = require("../../../../../utils/upgrade/android/importAndroidDisplayName");
const mockFs_1 = require("../../../../mocks/mockFs");
describe('importAndroidDisplayName', () => {
    it('should get display name', async () => {
        mockFs_1.mockFs.writeFileSync('/oldProject/android/app/src/main/res/values/strings.xml', `
<resources>
    <string name="app_name">test app</string>
</resources>
`);
        mockFs_1.mockFs.writeFileSync(path_1.default.join((0, getProjectPath_1.getProjectPath)(), 'android/app/src/main/res/values/strings.xml'), `
<resources>
    <string name="app_name">new app</string>
</resources>
`);
        const importGetter = (0, importAndroidDisplayName_1.importAndroidDisplayName)('/oldProject');
        expect(importGetter).toBeTruthy();
        expect(importGetter.value).toEqual('test app');
        await importGetter.apply();
        expect(mockFs_1.mockFs.readFileSync(path_1.default.join((0, getProjectPath_1.getProjectPath)(), 'android/app/src/main/res/values/strings.xml'))).toContain('<string name="app_name">test app</string>');
    });
    it('should handle errors', () => {
        mockFs_1.mockFs.setReadPermission(false);
        const importGetter = (0, importAndroidDisplayName_1.importAndroidDisplayName)('/oldProject');
        expect(importGetter).toBeNull();
    });
    it('should handle not finding display name', () => {
        mockFs_1.mockFs.writeFileSync('/oldProject/android/app/src/main/res/values/strings.xml', 'random');
        const importGetter = (0, importAndroidDisplayName_1.importAndroidDisplayName)('/oldProject');
        expect(importGetter).toBeNull();
    });
});
