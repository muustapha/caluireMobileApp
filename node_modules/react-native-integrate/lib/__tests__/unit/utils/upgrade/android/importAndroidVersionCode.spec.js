"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
require('../../../../mocks/mockAll');
const path_1 = __importDefault(require("path"));
const getProjectPath_1 = require("../../../../../utils/getProjectPath");
const importAndroidVersionCode_1 = require("../../../../../utils/upgrade/android/importAndroidVersionCode");
const mockFs_1 = require("../../../../mocks/mockFs");
describe('importAndroidVersionCode', () => {
    it('should get version code', async () => {
        mockFs_1.mockFs.writeFileSync('/oldProject/android/app/build.gradle', `
    ...
        versionCode 5
        versionName "5.5"
    ...`);
        mockFs_1.mockFs.writeFileSync(path_1.default.join((0, getProjectPath_1.getProjectPath)(), 'android/app/build.gradle'), `
    ...
        versionCode 1
        versionName "1.0"
    ...`);
        const importGetter = (0, importAndroidVersionCode_1.importAndroidVersionCode)('/oldProject');
        expect(importGetter).toBeTruthy();
        expect(importGetter.value).toEqual('5');
        await importGetter.apply();
        expect(mockFs_1.mockFs.readFileSync(path_1.default.join((0, getProjectPath_1.getProjectPath)(), 'android/app/build.gradle'))).toContain('versionCode 5');
    });
    it('should handle errors', () => {
        mockFs_1.mockFs.setReadPermission(false);
        const importGetter = (0, importAndroidVersionCode_1.importAndroidVersionCode)('/oldProject');
        expect(importGetter).toBeNull();
    });
    it('should handle not finding version code', () => {
        mockFs_1.mockFs.writeFileSync('/oldProject/android/app/build.gradle', 'random');
        const importGetter = (0, importAndroidVersionCode_1.importAndroidVersionCode)('/oldProject');
        expect(importGetter).toBeNull();
    });
});
