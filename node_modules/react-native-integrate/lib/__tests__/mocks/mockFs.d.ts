/// <reference types="jest" />
export declare const mockFs: {
    existsSync: (path: string) => boolean;
    renameSync: (from: string, to: string) => void;
    readFileSync: (path: string) => string;
    writeFileSync: (path: string, data: string) => boolean;
    copyFileSync: (from: string, to: string) => boolean;
    copyFile: jest.Mock<void, [from: string, to: string, cb: CallableFunction]>;
    mkdirSync: () => boolean;
    rmdirSync: (_path: string) => boolean;
    rmdir: jest.Mock<void, [_path: string, _opts: any, cb: CallableFunction]>;
    mkdir: jest.Mock<void, [_path: any, _opts: any, cb: CallableFunction]>;
    readdirSync: () => string[];
    readdir: jest.Mock<any, any>;
    unlink: jest.Mock<void, [filePath: string, cb: CallableFunction]>;
    lstatSync: jest.Mock<{
        isFile: () => boolean;
        isDirectory: () => boolean;
    }, [p: string]>;
    watch: (_filePath: string, _opts: any, listener: (event: string, filename: string) => void) => any;
    reset(): void;
    getStore(): Record<string, string>;
    setReadPermission(value: boolean): void;
    setWritePermission(value: boolean): void;
    readonly permissions: {
        read: boolean;
        write: boolean;
    };
};
