"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformTextInObject = exports.getText = exports.variables = void 0;
const getBundleId_1 = require("./utils/getBundleId");
const getDeploymentVersion_1 = require("./utils/getDeploymentVersion");
const getIosProjectPath_1 = require("./utils/getIosProjectPath");
// Predefined variables
const predefinedVariables = {
    PLATFORM: process.platform,
    get IOS_PROJECT_NAME() {
        try {
            return (0, getIosProjectPath_1.getIosProjectName)();
        }
        catch (e) {
            return null;
        }
    },
    get IOS_BUNDLE_ID() {
        try {
            return (0, getBundleId_1.getIosBundleId)();
        }
        catch (e) {
            return null;
        }
    },
    get IOS_DEPLOYMENT_VERSION() {
        try {
            return (0, getDeploymentVersion_1.getIosDeploymentVersion)();
        }
        catch (e) {
            return null;
        }
    },
    ...Object.entries(process.env).reduce((o, [name, value]) => {
        o[`ENV.${name}`] = value;
        return o;
    }, {}),
};
// User-defined variables
let _store = {};
exports.variables = {
    get(name) {
        if (name in predefinedVariables)
            return predefinedVariables[name];
        return _store[name];
    },
    set(name, value) {
        _store[name] = value;
    },
    setPredefined(name, value) {
        predefinedVariables[name] = value;
    },
    clear() {
        _store = {};
    },
    getStore() {
        return Object.assign(Object.create(Object.getPrototypeOf(predefinedVariables), Object.getOwnPropertyDescriptors(predefinedVariables)), _store);
    },
};
function getText(text) {
    return text.replace(/(?:\\+)?\$\[([^\\[\]]+)]/g, (allMatch, match) => {
        let slashCount = 0;
        for (let i = 0; i < allMatch.length; i++) {
            if (allMatch[i] == '\\')
                slashCount++;
            else
                break;
        }
        const slashes = '\\'.repeat(Math.floor(slashCount / 2));
        const isEscaped = slashCount % 2 == 1;
        if (isEscaped)
            return slashes + `$[${match}]`;
        const value = exports.variables.get(match);
        if (value == null) {
            const descIndex = match.indexOf(':');
            if (descIndex == -1)
                return slashes + match;
            return slashes + match.substring(descIndex + 1);
        }
        return slashes + value;
    });
}
exports.getText = getText;
function transformTextInObject(obj) {
    if (obj == null) {
        return obj;
    }
    // If obj is an array, process its elements.
    if (Array.isArray(obj)) {
        return obj.map((item) => transformTextInObject(item));
    }
    // If obj is a string, add a "+" sign to it.
    if (typeof obj == 'string') {
        return getText(obj);
    }
    // If obj is an object, process its properties.
    if (typeof obj == 'object') {
        const newObj = {};
        for (const key in obj) {
            // Recursively process the property value.
            newObj[key] = transformTextInObject(obj[key]);
        }
        return newObj;
    }
    // Return any other data types as is.
    return obj;
}
exports.transformTextInObject = transformTextInObject;
