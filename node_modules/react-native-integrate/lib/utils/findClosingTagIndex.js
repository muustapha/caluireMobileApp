"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TagDefinitions = exports.stripNonCode = exports.findClosingTagIndex = void 0;
function findClosingTagIndex(content, methodStartIndex, tags = exports.TagDefinitions.CURLY) {
    let braceCount = 1;
    let currentIndex = methodStartIndex;
    const strippedContent = stripNonCode(content, tags.comment);
    const openTagMatcher = new RegExp(tags.open);
    const anyTagMatcher = new RegExp(`(${tags.open}|${tags.close})`, 'msg');
    anyTagMatcher.lastIndex = currentIndex;
    while (braceCount > 0) {
        const matchNext = anyTagMatcher.exec(strippedContent);
        if (!matchNext)
            break;
        if (openTagMatcher.test(matchNext[0]))
            braceCount++;
        else
            braceCount--;
        currentIndex = matchNext.index;
    }
    if (braceCount > 0)
        throw new Error('Could not find closing tag for method body.');
    return currentIndex;
}
exports.findClosingTagIndex = findClosingTagIndex;
function stripNonCode(content, regex) {
    const nonCodeMatcher = new RegExp(`(${regex}|${stringRegex})`, 'msg');
    return content.replace(nonCodeMatcher, m => ' '.repeat(m.length));
}
exports.stripNonCode = stripNonCode;
// eslint-disable-next-line quotes
const stringRegex = `"(?:\\\\.|[^\\\\"])*"|'(?:\\\\.|[^\\\\'])*'`;
exports.TagDefinitions = {
    CURLY: { open: '\\{', close: '\\}', comment: '(\\/\\/.*?$|\\/\\*.*?\\*\\/)' },
    XML: {
        open: '<(?![\\/!])[^<]+(?!\\/).>',
        close: '</.*?>',
        comment: '<!--.*?-->',
    },
    POD: {
        open: '\\b(do\\b(\\s\\|.*?\\|)?|(?<!end )if\\b)',
        close: '\\bend(\\sif)?\\b',
        comment: '(#.*?$|=begin.*?=end)',
    },
    BRACKETS: {
        open: '\\[',
        close: '\\]',
        comment: '(\\/\\/.*?$|\\/\\*.*?\\*\\/)',
    },
};
