"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handlePackageUpgradeCopyFile = exports.copyPackageUpgradeFile = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const picocolors_1 = __importDefault(require("picocolors"));
const prompter_1 = require("../prompter");
const variables_1 = require("../variables");
const getProjectPath_1 = require("./getProjectPath");
const packageUpgradeConfig_1 = require("./packageUpgradeConfig");
function copyPackageUpgradeFile(packageName, destination) {
    const projectPath = (0, getProjectPath_1.getProjectPath)();
    // get from .upgrade folder
    const packageUpgradeConfig = (0, packageUpgradeConfig_1.getPackageUpgradeConfig)(packageName);
    // check if files is defined
    if (!packageUpgradeConfig.files)
        return false;
    const fileNameInUpgradeFolder = packageUpgradeConfig.files[destination];
    const filePathInUpgradeFolder = path_1.default.join(projectPath, '.upgrade', 'packages', packageName, 'files', fileNameInUpgradeFolder);
    if (!fs_1.default.existsSync(filePathInUpgradeFolder)) {
        return false;
    }
    fs_1.default.mkdirSync(path_1.default.dirname(destination), { recursive: true });
    (0, prompter_1.logMessage)(`copying ${picocolors_1.default.yellow(fileNameInUpgradeFolder)} to ${picocolors_1.default.yellow(destination)}`);
    fs_1.default.copyFileSync(filePathInUpgradeFolder, path_1.default.join(projectPath, destination));
    return true;
}
exports.copyPackageUpgradeFile = copyPackageUpgradeFile;
function handlePackageUpgradeCopyFile(packageName, destination) {
    const isUpgrade = variables_1.variables.get('__UPGRADE__') == true;
    if (!isUpgrade)
        return false;
    return copyPackageUpgradeFile(packageName, destination);
}
exports.handlePackageUpgradeCopyFile = handlePackageUpgradeCopyFile;
