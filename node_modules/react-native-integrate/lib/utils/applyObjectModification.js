"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.modifyObject = exports.applyObjectModification = void 0;
const lodash_mergewith_1 = __importDefault(require("lodash.mergewith"));
const picocolors_1 = __importDefault(require("picocolors"));
const prompter_1 = require("../prompter");
const variables_1 = require("../variables");
const satisfies_1 = require("./satisfies");
function applyObjectModification(content, action) {
    const strategy = action.strategy || 'assign';
    action.set = (0, variables_1.transformTextInObject)(action.set);
    content = modifyObject(content, action.set, strategy);
    Object.entries(action.set).forEach(([key, value]) => {
        const strValue = typeof value === 'string' ? value : JSON.stringify(value);
        (0, prompter_1.logMessage)(`set ${picocolors_1.default.yellow(key)} with ${picocolors_1.default.yellow(strategy)} strategy: ${(0, prompter_1.summarize)(strValue)}`);
    });
    return content;
}
exports.applyObjectModification = applyObjectModification;
function modifyObject(content, modifier, strategy) {
    if (strategy == 'assign') {
        content = Object.assign(content, modifier);
    }
    else if (strategy == 'append') {
        for (const key in modifier) {
            if (!(key in content))
                content[key] = modifier[key];
        }
    }
    else {
        /* eslint-disable @typescript-eslint/no-unsafe-return */
        const customizer = function (objValue, srcValue) {
            if (strategy == 'merge_concat') {
                if (Array.isArray(objValue) && Array.isArray(srcValue)) {
                    return objValue.concat(srcValue);
                }
            }
            else if (strategy == 'merge_distinct')
                if (Array.isArray(objValue) && Array.isArray(srcValue)) {
                    return objValue.concat(srcValue.filter(objB => 
                    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
                    objValue.every(objA => !(0, satisfies_1.deepEquals)(objA, objB))));
                }
            if (typeof srcValue === 'object' && srcValue.$assign) {
                delete srcValue.$assign;
                return srcValue;
            }
            if (typeof srcValue === 'object' && srcValue.$append) {
                delete srcValue.$append;
                return objValue;
            }
            if (Array.isArray(objValue) &&
                typeof srcValue === 'object' &&
                srcValue.$index != null) {
                const index = srcValue.$index;
                delete srcValue.$index;
                objValue[index] = (0, lodash_mergewith_1.default)(objValue[index], srcValue, customizer);
                return objValue;
            }
        };
        content = (0, lodash_mergewith_1.default)(content, modifier, customizer);
        /* eslint-enable @typescript-eslint/no-unsafe-return */
    }
    return content;
}
exports.modifyObject = modifyObject;
